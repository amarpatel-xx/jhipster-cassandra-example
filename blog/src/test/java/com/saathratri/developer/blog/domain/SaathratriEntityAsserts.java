package com.saathratri.developer.blog.domain;

import static com.saathratri.developer.blog.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SaathratriEntityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaathratriEntityAllPropertiesEquals(SaathratriEntity expected, SaathratriEntity actual) {
        assertSaathratriEntityAutoGeneratedPropertiesEquals(expected, actual);
        assertSaathratriEntityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaathratriEntityAllUpdatablePropertiesEquals(SaathratriEntity expected, SaathratriEntity actual) {
        assertSaathratriEntityUpdatableFieldsEquals(expected, actual);
        assertSaathratriEntityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaathratriEntityAutoGeneratedPropertiesEquals(SaathratriEntity expected, SaathratriEntity actual) {
        assertThat(expected)
            .as("Verify SaathratriEntity auto generated properties")
            .satisfies(e -> assertThat(e.getEntityId()).as("check entityId").isEqualTo(actual.getEntityId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaathratriEntityUpdatableFieldsEquals(SaathratriEntity expected, SaathratriEntity actual) {
        assertThat(expected)
            .as("Verify SaathratriEntity relevant properties")
            .satisfies(e -> assertThat(e.getEntityName()).as("check entityName").isEqualTo(actual.getEntityName()))
            .satisfies(e -> assertThat(e.getEntityDescription()).as("check entityDescription").isEqualTo(actual.getEntityDescription()))
            .satisfies(e ->
                assertThat(e.getEntityCost()).as("check entityCost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getEntityCost())
            )
            .satisfies(e -> assertThat(e.getCreatedId()).as("check createdId").isEqualTo(actual.getCreatedId()))
            .satisfies(e -> assertThat(e.getCreatedTimeId()).as("check createdTimeId").isEqualTo(actual.getCreatedTimeId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaathratriEntityUpdatableRelationshipsEquals(SaathratriEntity expected, SaathratriEntity actual) {
        // empty method
    }
}
