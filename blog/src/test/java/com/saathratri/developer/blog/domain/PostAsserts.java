package com.saathratri.developer.blog.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PostAsserts {

    /**
     * Asserts that the entity has all properties (fields) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostAllPropertiesEquals(Post expected, Post actual) {
        assertPostAutoGeneratedPropertiesEquals(expected, actual);
        assertPostAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostAllUpdatablePropertiesEquals(Post expected, Post actual) {
        assertPostUpdatableFieldsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostAutoGeneratedPropertiesEquals(Post expected, Post actual) {
        assertThat(expected)
            .as("Verify Post auto generated properties")
            .satisfies(e ->
                assertThat(e.getCompositeId().getCreatedDate()).as("check createdDate").isEqualTo(actual.getCompositeId().getCreatedDate())
            )
            .satisfies(e ->
                assertThat(e.getCompositeId().getAddedDateTime())
                    .as("check addedDateTime")
                    .isEqualTo(actual.getCompositeId().getAddedDateTime())
            )
            .satisfies(e -> assertThat(e.getCompositeId().getPostId()).as("check postId").isEqualTo(actual.getCompositeId().getPostId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostUpdatableFieldsEquals(Post expected, Post actual) {
        assertThat(expected)
            .as("Verify Post relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getPublishedDateTime()).as("check publishedDateTime").isEqualTo(actual.getPublishedDateTime()))
            .satisfies(e -> assertThat(e.getSentDate()).as("check sentDate").isEqualTo(actual.getSentDate()));
    }
}
